// Code generated by protoc-gen-go.
// source: shared.proto
// DO NOT EDIT!

package packet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// enumerations for client types
type ClientType int32

const (
	ClientType_PRODUCER ClientType = 0
	ClientType_CONSUMER ClientType = 1
)

var ClientType_name = map[int32]string{
	0: "PRODUCER",
	1: "CONSUMER",
}
var ClientType_value = map[string]int32{
	"PRODUCER": 0,
	"CONSUMER": 1,
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// enumerations for errors
type ErrorCode int32

const (
	ErrorCode_OK ErrorCode = 0
	// client-node error 1xxx
	ErrorCode_CONN_FAILED ErrorCode = 1001
	// cluster error 2xxx
	ErrorCode_CLUSTER_CONN_FAILED ErrorCode = 2001
	// logic error 3xxx
	ErrorCode_NO_CONSUMER ErrorCode = 3001
	// unknown error
	ErrorCode_UNKNOWN ErrorCode = 9999
)

var ErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "CONN_FAILED",
	2001: "CLUSTER_CONN_FAILED",
	3001: "NO_CONSUMER",
	9999: "UNKNOWN",
}
var ErrorCode_value = map[string]int32{
	"OK":                  0,
	"CONN_FAILED":         1001,
	"CLUSTER_CONN_FAILED": 2001,
	"NO_CONSUMER":         3001,
	"UNKNOWN":             9999,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Full-ID
type FullId struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NodeId   uint64 `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	ClientId uint64 `protobuf:"varint,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *FullId) Reset()                    { *m = FullId{} }
func (m *FullId) String() string            { return proto.CompactTextString(m) }
func (*FullId) ProtoMessage()               {}
func (*FullId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FullId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FullId) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *FullId) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// Invocation
type Invocation struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Arguments   string `protobuf:"bytes,2,opt,name=arguments" json:"arguments,omitempty"`
	NoReturn    bool   `protobuf:"varint,3,opt,name=no_return,json=noReturn" json:"no_return,omitempty"`
}

func (m *Invocation) Reset()                    { *m = Invocation{} }
func (m *Invocation) String() string            { return proto.CompactTextString(m) }
func (*Invocation) ProtoMessage()               {}
func (*Invocation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Invocation) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Invocation) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

func (m *Invocation) GetNoReturn() bool {
	if m != nil {
		return m.NoReturn
	}
	return false
}

func init() {
	proto.RegisterType((*FullId)(nil), "sodibus.FullId")
	proto.RegisterType((*Invocation)(nil), "sodibus.Invocation")
	proto.RegisterEnum("sodibus.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("sodibus.ErrorCode", ErrorCode_name, ErrorCode_value)
}

func init() { proto.RegisterFile("shared.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xdf, 0x4a, 0xf3, 0x30,
	0x18, 0xc6, 0xb7, 0x7e, 0x1f, 0xfd, 0xf3, 0xae, 0x68, 0x89, 0x07, 0x1b, 0xcc, 0x03, 0x1d, 0x08,
	0x63, 0x07, 0x3d, 0xf1, 0x0a, 0xb4, 0xeb, 0xa0, 0x6c, 0xa6, 0x92, 0xad, 0x08, 0x9e, 0x94, 0xae,
	0x09, 0x33, 0xba, 0x26, 0x23, 0x69, 0x07, 0xbb, 0x0a, 0xaf, 0xc7, 0xcb, 0xf0, 0x32, 0xbc, 0x0b,
	0x69, 0x36, 0xd4, 0xa3, 0xf0, 0xfc, 0x9e, 0xf0, 0xfe, 0xe0, 0x01, 0x5f, 0xbf, 0x14, 0x8a, 0xd1,
	0x70, 0xa7, 0x64, 0x2d, 0x91, 0xa3, 0x25, 0xe5, 0xeb, 0x46, 0x8f, 0x30, 0xd8, 0xb3, 0x66, 0xbb,
	0x4d, 0x28, 0x3a, 0x03, 0x8b, 0xd3, 0x41, 0xf7, 0xaa, 0x3b, 0xfe, 0x4f, 0x2c, 0x4e, 0x51, 0x1f,
	0x1c, 0x21, 0x29, 0xcb, 0x39, 0x1d, 0x58, 0x06, 0xda, 0x6d, 0x4c, 0x28, 0x1a, 0x82, 0x57, 0x6e,
	0x39, 0x13, 0x75, 0x5b, 0xfd, 0x33, 0x95, 0x7b, 0x04, 0x09, 0x1d, 0xbd, 0x02, 0x24, 0x62, 0x2f,
	0xcb, 0xa2, 0xe6, 0x52, 0xa0, 0x6b, 0xf0, 0x35, 0x53, 0x7b, 0x5e, 0xb2, 0x5c, 0x14, 0x15, 0x33,
	0xd7, 0x3d, 0xd2, 0x3b, 0x31, 0x5c, 0x54, 0x0c, 0x5d, 0x82, 0x57, 0xa8, 0x4d, 0x53, 0x31, 0x51,
	0x6b, 0x23, 0xf2, 0xc8, 0x2f, 0x68, 0x5d, 0x42, 0xe6, 0x8a, 0xd5, 0x8d, 0x12, 0xc6, 0xe5, 0x12,
	0x57, 0x48, 0x62, 0xf2, 0x64, 0x0c, 0x10, 0x19, 0xef, 0xea, 0xb0, 0x63, 0xc8, 0x07, 0xf7, 0x91,
	0xa4, 0xd3, 0x2c, 0x8a, 0x49, 0xd0, 0x69, 0x53, 0x94, 0xe2, 0x65, 0xf6, 0x10, 0x93, 0xa0, 0x3b,
	0xc9, 0xc1, 0x8b, 0x95, 0x92, 0x2a, 0x92, 0x94, 0x21, 0x1b, 0xac, 0x74, 0x1e, 0x74, 0x50, 0x00,
	0xbd, 0x28, 0xc5, 0x38, 0x9f, 0xdd, 0x25, 0x8b, 0x78, 0x1a, 0x7c, 0x39, 0x68, 0x00, 0x17, 0xd1,
	0x22, 0x5b, 0xae, 0x62, 0x92, 0xff, 0x6d, 0x3e, 0xcf, 0xdb, 0xbf, 0x38, 0xcd, 0x7f, 0x2e, 0x7e,
	0xf4, 0x91, 0x0f, 0x4e, 0x86, 0xe7, 0x38, 0x7d, 0xc2, 0xc1, 0x3b, 0xbe, 0xbf, 0x81, 0xa1, 0x3e,
	0xe8, 0x9a, 0x55, 0x3a, 0xac, 0x8a, 0x0d, 0x0f, 0x4f, 0xf3, 0x86, 0xbb, 0xa2, 0x7c, 0x63, 0xf5,
	0xb3, 0x7d, 0x7c, 0xd7, 0xb6, 0x59, 0xff, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x73, 0x6d,
	0x6f, 0x8d, 0x01, 0x00, 0x00,
}
